{% style %}
  .product-recommendations {
    text-align: center;

    h2 {
      font-size: 30px;
      margin: 30px auto;
    }

    .card {
      background-size: cover;
      background-position: center;
      background-repeat: no-repeat;
      width: 100%;
    }

    .overlay {
      opacity: 0;
      transition: all ease-in-out 0.3s;
      z-index: -1;
    }

    .card-container:hover .overlay {
      opacity: 1;
      z-index: 1;
    }
  }

  .product-card {
    .card {
      background-size: cover;
      background-position: center;
      background-repeat: no-repeat;
      width: 100%;
    }

    .overlay {
      opacity: 0;
      transition: all ease-in-out 0.3s;
      z-index: -1;
    }

    .card-container:hover .overlay {
      opacity: 1;
      z-index: 1;
    }
  }
{% endstyle %}

<div class="product-recommendations my-8" data-url="{{ routes.product_recommendations_url }}?section_id={{ section.id }}&product_id={{ product.id }}&limit=4&intent=related">
  {%- if recommendations.performed? and recommendations.products_count > 0 -%}
    {% if recommendations.intent == 'related' %}
      <h2>You may also like</h2>
    {% elsif recommendations.intent == 'complementary' %}
      <h2>Pair it with</h2>
    {% endif %}

    <div class="w-[90%] mx-auto grid grid-cols-[1fr_1fr] grid-rows-[1fr_1fr] md:grid-rows-[1fr] md:grid-cols-[1fr_1fr_1fr_1fr] gap-8">
      {% for product in recommendations.products %}
        {% render "product-card", product: product %}
      {% else %}
        <p>No products found.</p>
      {% endfor %}
    </div>
  {%- endif -%}
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const productRecommendationsSection = document.querySelector('.product-recommendations');
    if (!productRecommendationsSection) return;

    const observer = new IntersectionObserver((entries, observer) => {
      if (!entries[0].isIntersecting) return;
      observer.unobserve(entries[0].target);

      const url = entries[0].target.dataset.url;

      fetch(url)
        .then(response => response.text())
        .then(text => {
          const html = document.createElement('div');
          html.innerHTML = text;
          const recommendations = html.querySelector('.product-recommendations');

          if (recommendations && recommendations.innerHTML.trim().length) {
            entries[0].target.innerHTML = recommendations.innerHTML;
            attachEventListeners(); // Attach event listeners after content is loaded
            initWishlistButtons(); // Initialize wishlist buttons after content is loaded
          }
        })
        .catch(e => {
          console.error('Error fetching recommendations:', e);
        });
    }, { rootMargin: '0px 0px 200px 0px' });

    observer.observe(productRecommendationsSection);
    attachEventListeners(); // Attach event listeners on initial load
    initWishlistButtons(); // Initialize wishlist buttons on initial load
  });

  const attachEventListeners = () => {
    document.querySelectorAll('.add_to_cart').forEach(item => {
      item.addEventListener('click', event => {
        event.preventDefault(); // Prevent default form submission
        const id = item.getAttribute('data-id');
        fetch(`/cart/add.js?id=${id}&quantity=1`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          }
        })
        .then(response => response.json())
        .then(data => {
          console.log(data);
          window.location.href = '/cart';
        })
        .catch((error) => {
          console.error('Error:', error);
        });
      });
    });
  };

  const initWishlistButtons = () => {
    const buttons = document.querySelectorAll('[button-wishlist]');
    if (buttons.length) {
      buttons.forEach(button => {
        const productHandle = button.dataset.productHandle || false;
        if (!productHandle) return console.error('[Shopify Wishlist] Missing `data-product-handle` attribute. Failed to update the wishlist.');
        if (wishlistContains(productHandle)) button.classList.add('active');
        button.addEventListener('click', () => {
          updateWishlist(productHandle);
          button.classList.toggle('active');
        });
      });
      const event = new CustomEvent('shopify-wishlist:init-buttons', {
        detail: { wishlist: getWishlist() }
      });
      document.dispatchEvent(event);
    }
  };

  const getWishlist = () => {
    const wishlist = localStorage.getItem('shopify-wishlist') || false;
    if (wishlist) return wishlist.split(',');
    return [];
  };

  const setWishlist = (array) => {
    const wishlist = array.join(',');
    if (array.length) localStorage.setItem('shopify-wishlist', wishlist);
    else localStorage.removeItem('shopify-wishlist');

    const event = new CustomEvent('shopify-wishlist:updated', {
      detail: { wishlist: array }
    });
    document.dispatchEvent(event);

    return wishlist;
  };

  const updateWishlist = (handle) => {
    const wishlist = getWishlist();
    const indexInWishlist = wishlist.indexOf(handle);
    if (indexInWishlist === -1) wishlist.push(handle);
    else wishlist.splice(indexInWishlist, 1);
    return setWishlist(wishlist);
  };

  const wishlistContains = (handle) => {
    const wishlist = getWishlist();
    return wishlist.includes(handle);
  };
</script>

{% schema %}
  {
    "name": "Product recommendations",
    "settings": []
  }
{% endschema %}
